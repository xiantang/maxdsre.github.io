<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fp(函数式编程)s on xiantang</title>
    <link>https://xiantang.github.io/fp%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in Fp(函数式编程)s on xiantang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://xiantang.github.io/fp%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://xiantang.github.io/fp%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/fp-in-scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiantang.github.io/fp%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/fp-in-scala/</guid>
      <description>什么是函数式编程?
函数式编程：只用纯函数来构造程序。
什么是纯函数?
没有副作用的函数。
什么是副作用?
一个带有副作用的函数，不仅会简单的返回一个值，而且会干一些其他的事情。
非严格求值
def getOrElse[B &amp;gt;: A](default: =&amp;gt; B): B = this match{ case None =&amp;gt; default case Some(x) =&amp;gt; x } 可以看到如果为 None 的情况下计算 default 的值，否则返回内部的值
这样能提高性能</description>
    </item>
    
    <item>
      <title></title>
      <link>https://xiantang.github.io/fp%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/fp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiantang.github.io/fp%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/fp/</guid>
      <description>第一公民 函数 闭包  lexical scope   高阶函数 柯里化  random (1,10)
![image-20191129190758229](/Users/xiantang/Library/Application Support/typora-user-images/image-20191129190758229.png)
![image-20191129190236925](/Users/xiantang/Library/Application Support/typora-user-images/image-20191129190236925.png)
闭包有一些前置知识需要知道
lexical scope
![image-20191129191234476](/Users/xiantang/Library/Application Support/typora-user-images/image-20191129191234476.png)
为什么要有 lexical scope？
![image-20191129191724741](/Users/xiantang/Library/Application Support/typora-user-images/image-20191129191724741.png)
因为你想啊 如果变量是动态的 内部的x 会被外边定义的x 影响的话，那filter 函数将会失效
![image-20191129192023173](/Users/xiantang/Library/Application Support/typora-user-images/image-20191129192023173.png)
当你用fold来实现一些更加具象的东西的时候
![image-20191129193025588](/Users/xiantang/Library/Application Support/typora-user-images/image-20191129193025588.png)
你可以看到上面两个函数都是使用了私有数据 以f3 为例 hi, lo 的值在函数定义时候已经被设置好了，当传入的时候，以及运算的时候都不会被外部变量影响。
因为这个所以能够让这些 fold map filter 更有力量。
![image-20191129190608208](/Users/xiantang/Library/Application Support/typora-user-images/image-20191129190608208.png)
![image-20191129190638068](/Users/xiantang/Library/Application Support/typora-user-images/image-20191129190638068.png)
柯里化
![image-20191129194251416](/Users/xiantang/Library/Application Support/typora-user-images/image-20191129194251416.png)
![image-20191129194526611](/Users/xiantang/Library/Application Support/typora-user-images/image-20191129194526611.png)
![image-20191129194814552](/Users/xiantang/Library/Application Support/typora-user-images/image-20191129194814552.png)
currying 的好处是
你可以缺省这些参数
采用 sorted 3
他返回的是一个 fn y=&amp;gt; fn z=&amp;gt; z&amp;gt;=y andalso y&amp;gt;=3 的函数</description>
    </item>
    
    <item>
      <title></title>
      <link>https://xiantang.github.io/fp%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/how-future-work/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiantang.github.io/fp%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/how-future-work/</guid>
      <description>object Future { def apply[T](body: =&amp;gt; T)(implicit executor: ExecutionContext): Future[T] = unit.map(_ =&amp;gt; body) } a Java framework for supporting a style of parallel programming in which problems are solved by (recursively) splitting them into subtasks that are solved in parallel, waiting for them to complete, and then composing results
1.INTRODUCTION
The fork operation starts a new parallel fork/join subtask.
The join operation causes the current task not to proceed until the forked subtask has completed.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://xiantang.github.io/fp%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B8%8Escala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiantang.github.io/fp%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B8%8Escala/</guid>
      <description>背景: 刚来到以scala为技术栈的公司的时候，配置了半天环境，然后终于将项目起了起来，发现里面的代码很奇怪，没有任何循环，数据的操作是一个函数套着一个函数，十分令人疑惑，于是借着业务需求和这股好奇劲开始学习关于scala的内容。
目标:  熟练运用项目中的异步操作 Future 变换 (同步思维转异步) 熟悉 Play 框架能够熟练的翻文档解决问题 熟练运用高阶函数 map flatMap 等操作  阶段 1:能写 Scala 这个阶段比较容易达到，就是首先需要阅读 《Scala编程》前几章 或者 推特scala课堂 ，来了解scala的基本语法。但是在这个阶段仍然会有很多的坑，基本是在 IDEA 的提示 与 爆红下才能勉强的写代码。
阶段2: 知道函数式编程是什么东西 当你差不多写了半个月 Scala 之后，仍然好奇函数式编程是什么东西，这个时候你就可以去学习一些关于函数式编程的知识了，我的线路是先学习了 programming-languages 这门入门课程，主要讲了一些关于函数式编程的基础知识,包括但不限于 闭包 高阶函数 尾递归 代数类型。 虽然语言不是Scala 但是这门课为我之后的函数式编程打下了一定的基础。 如果你在这门课上认真的完成了作业，后面的路会通畅很多。
阶段3:再深入的了解 到这个时候，你一定会听到一本十分有名的书《Scala 函数式编程》 这本书，很有可能在你没经历前几个阶段的时候，你就看了，但是发觉里面的内容十分抽象，便放弃了。现在你就可以大胆的去看它了，可以无痛的看到第六章。
再在下面，就会被更抽象的 Monad Factor 等概念所迷惑。
阶段4:持续学习基础 上面的阻塞其实还是因为对基础知识不够扎实，所以还是需要进一步的学习，这里推荐 Scala 语言作者的课程 Functional Programming Principles in Scala . 因为不是免费的，所以需要付费或者采用奖学金（咸鱼）来免费学习。这门课程虽然不及上面的 programming-languages 课程，但是比较困难的习题还是能提升FP的水平的。
阶段5:参与社区 这个时候你就可以继续去看 《Scala 函数式编程》 这本书了，因为你看完了上面的两门全英文课程所以英文也不会再惧怕就可以参与社区了，这里推荐几个比较好的社区，曾经给我过帮助的社区 https://gitter.im/scala/scala. https://gitter.im/akka/akka , 如果对开源有兴趣，就可以给 akka 或者 Play 修复BUG了。</description>
    </item>
    
  </channel>
</rss>