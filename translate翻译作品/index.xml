<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Translate(翻译作品)s on xiantang</title>
    <link>https://xiantang.github.io/translate%E7%BF%BB%E8%AF%91%E4%BD%9C%E5%93%81/</link>
    <description>Recent content in Translate(翻译作品)s on xiantang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://xiantang.github.io/translate%E7%BF%BB%E8%AF%91%E4%BD%9C%E5%93%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://xiantang.github.io/translate%E7%BF%BB%E8%AF%91%E4%BD%9C%E5%93%81/equals-%E5%92%8C-hashcode-%E6%96%B9%E6%B3%95%E5%9C%A8java%E4%B8%AD%E7%9A%84%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiantang.github.io/translate%E7%BF%BB%E8%AF%91%E4%BD%9C%E5%93%81/equals-%E5%92%8C-hashcode-%E6%96%B9%E6%B3%95%E5%9C%A8java%E4%B8%AD%E7%9A%84%E5%85%B3%E7%B3%BB/</guid>
      <description>Java.lang.object 定义了两个非常重要的方法:
 public boolean equals(Object obj) public int hashCode()  equals() 方法 在Java 中 equals()是用来比较两个对象是否相等。主要分为两个方面的比较:
 浅比较(Shallow comparison):在Java.lang.Object 类中默认的实现是简单的比较两个引用(假设是x和y)是否指向同样的对象。由于Object类没有定义其状态的数据成员，所以也称之为浅比较(Shallow comparison)。 深比较(Deep Comparison):假设一个类提供了拥有对equals()方法的自己的实现，目的去比较具有w.r.t状态的对象。意思是对象中的数据成员(例如:域)将会被比较。基于数据成员的比较方式叫做深比较(Deep Comparison)。  语法:
public boolean equals (Object obj) // This method checks if some other Object // passed to it as an argument is equal to // the Object on which it is invoked. //此方法检查是否有其他Object //作为参数传递给它等于 //调用它的Object。 Object类中一些关于equals()的原则:如果某个其他对象等于给定对象，则它遵循以下规则：
 自反性：对于任何引用a,a.equals(a)应该返回true。 对称性：对于任何引用a和b，如果a.equals(b)返回true,那么b.equals(a)必须返回true。 传递性:对于任何引用a，b和c，如果a.equals(b)返回true，　并且b.equals(c)返回true，则a.equals(c)应该返回true。 一致性:对于任何应用a和b,多次调用a.equals(b)始终返回true或始终返回false,前提是在没有修改对象equals比较中使用的信息。  注:对于任何非空的引用a,a.equals(null)应该返回false。
class Geek { public String name; public int id; Geek(String name, int id) { this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://xiantang.github.io/translate%E7%BF%BB%E8%AF%91%E4%BD%9C%E5%93%81/sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiantang.github.io/translate%E7%BF%BB%E8%AF%91%E4%BD%9C%E5%93%81/sdk/</guid>
      <description>GrowingIO Marketing API Java Library 概述 GrowingIO Marketing API 的 Java 版本封装库。
对应的 REST API 文档：REST API - Push.
安装 maven 方式 将下边的依赖条件放到你项目的 maven pom.xml 文件里。
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.growingio&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;marketing-api-java-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 样例 推送 API  构建推送对象：所有平台，推送目标是别名为 &amp;ldquo;alias1&amp;rdquo;，通知内容为 ALERT。 构建 PushMessage:  // 需要替换成使用者的自己的变量  String clientId = &amp;#34;clientId&amp;#34;; String secret = &amp;#34;secret&amp;#34;; String projectUid = &amp;#34;projectUid&amp;#34;; String ai = &amp;#34;ai&amp;#34;; PushMessageClient client = PushMessageClient.getInstance(clientId, secret, projectUid, ai); Options options = Options.</description>
    </item>
    
  </channel>
</rss>