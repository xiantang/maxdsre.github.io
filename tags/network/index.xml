<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>network on </title>
    <link>/tags/network/</link>
    <description>Recent content in network on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 01 Apr 2020 01:37:56 +0800</lastBuildDate><atom:link href="/tags/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TCP 针对面试学习</title>
      <link>/post/network/tcp%E9%92%88%E5%AF%B9%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 01 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>/post/network/tcp%E9%92%88%E5%AF%B9%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0/</guid>
      <description>什么是TCP  TCP 是一个全双工 面向字节流的基于IP协议的协议。 TCP 端到端的准确传输。  对于每一个字节进行确认 对于恶劣的网络情况的处理  超时重传 拥塞控制   效率提升  采用滑动窗口协议     TCP 是一个面向连接的协议。  既然面向连接那这个连接是怎么建立的？
也就是下面的问题如果建立一个虚拟的链路采用三次握手。
三次挥手是怎么发生的 详细操作 从码出高效扒了一张图下来，我们来讲一下三次握手的流程：
 A 机器首先会计算出一个 seq 索引 x 表示当前发送的数据包的位置 并且包的标示为 SYN。 B 机器接受到了这个包，并且将包中的数据存到自己的缓冲区中，因为这个包的大小为 1 字节，所以缓存区的索引是 x +1 同步到对方的发送 seq 位置，返回一个 SYN 和 ACK 标示的包，并且将自己的发送 seq 索引 y 以及告诉对方自己收到了这个数据包 所以 ack +1。 C 机器收到这个带有ACK 和 SYN 的包 需要返回一个ACK 表示自己能够收到对方的包，所以发送一个 ACK 和自己当前的发送 seq 以及自己的接受seq。  为啥要握三次 至于为啥要握三次</description>
    </item>
    
  </channel>
</rss>
