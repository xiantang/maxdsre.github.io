<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>summary on 自律者自由</title>
    <link>https://vim0.com/tags/summary/</link>
    <description>Recent content in summary on 自律者自由</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 10 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://vim0.com/tags/summary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>总结一些计算机常用的原则</title>
      <link>https://vim0.com/post/summary/rules/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://vim0.com/post/summary/rules/</guid>
      <description>计算机常用的原则 在写代码的时候我们经常会有一些体会和经验所得，这些经验所得其实老早被之前的大神归纳成为原则。最近这一年我就一直在收集各种原则然后不断的运用和实践。
KISS 原则 KISS 原则是英语 Keep It Simple，Stupid 的首字母缩略字。
KISS 原则是指在设计当中应当注重简约的原则。总结工程专业人员在设计过程中的经验，大多数系统的设计应保持简洁和单纯，而不掺入非必要的复杂性，这样的系统运作成效会取得最优。
正确的做法应该是当开发者遇到一个问题后，把问题拆分成一个个能够明白的小块，然后进入编码阶段。
  好处：
 你将可以通过很少的几行代码去解决复杂的问题。 你将可以产出高质量的代码。 当新的需求来了后，你的代码将会更加的灵活。    怎么用：
 你不是天才，你的代码 stupid simple，所以你没必要是天才。 拆解问题。任务拆解为 4 - 12 小时的子任务。 每个子任务用一个或者很少的类解决问题。保持类要小不用搞太多 uses case 在里面。 保持方法足够短。30 - 40 行。 任何场景尝试简单。    DRY 原则 don&amp;rsquo;t repeat yourself，直译不要重复你自己。
这个原则其实在工作中特别常用，比如你的代码经常会写重复的，你就可以将它抽成一个函数。
但是我觉得最佳实践是：如果一件事情做了 3 次，才将它抽成一个函数或做抽象，因为过早的抽象会导致不够普适，不利于代码的维护。
YAGNI 原则 You aren&amp;rsquo;t gonna need it，YAGNI 的意思是“你不需要它”：在必要之前不要做多余的事情。
这个原则主要是告诉我们不要太早的去思考一个问题，降低实现的成本。 虽然和前者有些矛盾，但是我们可以通过我上面提到 3 次重复再尝试抽象来做折中来实践会比较好一些。
单一责任原则 单一职责原则 (Single Responsibility Principle)，简单来说就是一个类只负责一个职责，而不能负责多个职责。在程序设计中，单一职责原则是一个很重要的原则，因为它能够帮助我们更好的组织代码，更好的管理代码，更好的解决问题。</description>
    </item>
    
    <item>
      <title>2018年年度总结</title>
      <link>https://vim0.com/post/summary/2018_summary/</link>
      <pubDate>Sun, 30 Dec 2018 14:40:53 +0800</pubDate>
      
      <guid>https://vim0.com/post/summary/2018_summary/</guid>
      <description>到年底啦，稍微写一点总结总结一下这个2018年。
这一年有失去也有获得吧。失去是一段没有结果的感情的失败，获得则是整个人质的提升。
失去的就让他过去了，我也不想再多提什么。
我们来谈谈收获吧。
收获主要分为三个方面，身体，技术和金钱。
先谈身体吧，今年年初的时候，也就是大二下刚开始的时候，坚持每天去操场去跑个几圈，有时就算是下着 ️我们也会去跑一下，但是跑着跑着就只剩下我一个人来，遂就作废。之后没怎么锻炼，每天在实验室呆到 10 点，感觉身体也有点愚钝了。之后就是实习，实习的时候尝试去过一天健身房，但是离住的地方实在太远了，所以也就作废。其实是因为太懒但是在内心还是想去健身房持久不断的锻炼的。遂在这个学期的 10 月份办了张健身卡，一开始是自己一个人锻炼的，而且有时候还有技术不够格的私教忽悠我办卡，我每次都是用贫穷来拒绝❌。不过自己的确没有很认真在练，之后就是 10 月中旬，涛哥开始带我了 (实验室队友)，我才感觉到这才是健身，每次看到涛哥表情狰狞的样子，我就想我也得努力一点，一直坚持到年底，感觉肩膀结实了一点，胳膊也粗了一些，也不会有坐太久虚了的情况。尽管现在有了一点点成果，但是我知道，健身这种东西是以年为单位的，肌肉是需要慢慢雕刻的。
再谈技术，今年最大的变化是主力开发语言的改变，从 Python 转到了 Java，其实是一直想转变的，明显感受到做爬虫和 Python 后端的前途不明朗，我主要想发展的方向是爬虫，但是渐渐觉得爬虫，作为第二技能会比较好一点。中间真的经历了很多纠结，但是还是作出了决定。对于 Java 这门语言其实我也不算厌恶，因为这是一门很优秀并且稳定的语言，有着非常好的生态，可能也因为我不能十分好的驾驭 Python 吧。对于 Java 的学习，其实我对于这门庞大的语言还是十分的不熟悉的，希望自己能够从基础开始，然后慢慢去了解后端的体系结构吧。我想对未来的我说，后端不只是 Java，一个优秀的后端工程师是不会被语言给限制住的。
关于金钱，今年的理解是，只要够用就行。年初因为变故，辞了理货员的兼职，所以收入会比之前少了一些，但是在开学之后，就开始接爬虫外包，没有做的很拼命，正好和自己做理货员的工资相抵消，但是那段时间对于我的技术的成长是很大的，让我更加熟悉了 Python 这门语言。今年的爬虫实习，干了暑假两个月，拿了 6K，伤心的是这个 6K 被我在杭州的开销相抵消了大部分，实在是有点真实。不过回到学校，我换了一台手机，应该能撑过剩下两年 8⃣️。最近前公司的项目老大找我做爬虫，我要了很高的价格因为自己其实不是很想做，尝试了做了一下，发现其实工作量比想象中的大很多，遂放弃。也和这段开头说的相同，够用就行，能够学习自己喜欢的技术，并且做自己想要做的项目，其实也是一件很快乐的的事情。一直做自己喜欢的事情，会随之而来的。
我的 2018 就是这样，2019 的目标先不写出来了，只希望能变成更好的自己。
​</description>
    </item>
    
  </channel>
</rss>
