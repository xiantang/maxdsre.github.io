<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 咸糖 - 自律者自由</title>
    <link>https://vim0.com/post/</link>
    <description>Recent content in Posts on 咸糖 - 自律者自由</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 01 Dec 2024 15:31:25 +0800</lastBuildDate><atom:link href="https://vim0.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024 年终总结</title>
      <link>https://vim0.com/post/2024_recap/</link>
      <pubDate>Sun, 01 Dec 2024 15:31:25 +0800</pubDate>
      
      <guid>https://vim0.com/post/2024_recap/</guid>
      <description>今天是 2024 即将收尾的最后一个月，我看到很多平台都有在发年度的 recap，像 reddit 啥的，我也想写一篇年度总结，记录一下这一年发生的事情。 2024 年终总结 一</description>
    </item>
    
    <item>
      <title>Neovim: No Crash Incremental Selection</title>
      <link>https://vim0.com/post/neovim_no_crash_incremental_selection/</link>
      <pubDate>Thu, 11 Jul 2024 23:16:09 +0800</pubDate>
      
      <guid>https://vim0.com/post/neovim_no_crash_incremental_selection/</guid>
      <description>When I use neovim treesitter incremental selection, it randomly crashes, but I cannot stable reproduce it. And I found some issues and complaints about this issue, but no solution. So I decide to write a blog post to record this issue and the solution.
related issues:
 https://www.reddit.com/r/neovim/comments/10wwkft/comment/j7qla2q/?utm_source=share&amp;amp;utm_medium=web3x&amp;amp;utm_name=web3xcss&amp;amp;utm_term=1&amp;amp;utm_content=share_button https://github.com/neovim/neovim/issues/24336 https://github.com/neovim/neovim/issues/25254 https://www.reddit.com/r/neovim/comments/18dn4qt/treesitter_incremental_selection/  TL;DR paste this https://github.com/xiantang/nvim-conf/blob/7c0d6cbf6d9fd7b6a8960de887db1109332419bf/lua/plugins/treesitter.lua#L62-L132 into your neovim configuration file.
this is my treesitter incremental selection configuration:
1 2 3 4 5 6 7 8 9  incremental_selection = { enable = true, keymaps = { init_selection = true, node_incremental = &amp;#34;v&amp;#34;, node_decremental = &amp;#34;&amp;lt;BS&amp;gt;&amp;#34;, }, },   sometime when I use v to expand the selection, it crashes, and it&amp;rsquo;s a Segmentation fault, and I have the report:</description>
    </item>
    
    <item>
      <title>2022 年终总结</title>
      <link>https://vim0.com/post/2022/</link>
      <pubDate>Sun, 01 Jan 2023 16:30:40 +0800</pubDate>
      
      <guid>https://vim0.com/post/2022/</guid>
      <description>今天是 2023 年的第一天，我想写一篇年终总结，回顾一下 2022 年的一些事情。 同时也是一个自我的回顾。 2022 年终总结 2022 年是一个不大顺利的一年， 似乎因为经济下行</description>
    </item>
    
    <item>
      <title>使用 neovim 作为 PDE(个性化开发环境)</title>
      <link>https://vim0.com/post/neovim/</link>
      <pubDate>Sat, 29 Oct 2022 20:45:20 +0800</pubDate>
      
      <guid>https://vim0.com/post/neovim/</guid>
      <description>本文不会告诉你如何一步一步地配置 neovim，而是告诉你一些关于 PDE 的 &amp;ldquo;道&amp;rdquo;, 不是具体实践的 &amp;ldquo;术&amp;rdqu</description>
    </item>
    
    <item>
      <title>shell 是一个不错的生产力工具</title>
      <link>https://vim0.com/post/shell_is_useful_tool/</link>
      <pubDate>Mon, 12 Sep 2022 14:34:53 +0800</pubDate>
      
      <guid>https://vim0.com/post/shell_is_useful_tool/</guid>
      <description>连续三个命令的序列，重复执行了第二次，那么就建议你将它写成一个 Shell 脚本 &amp;ndash; blog.fleeto.us 最近越来越发觉 shell 是一门可以代替 python 作为 devops 的工程师的第二门语言. 因为日常</description>
    </item>
    
    <item>
      <title>使用二八法则省力地学习 awk</title>
      <link>https://vim0.com/post/awk/</link>
      <pubDate>Wed, 29 Jun 2022 22:14:09 +0800</pubDate>
      
      <guid>https://vim0.com/post/awk/</guid>
      <description>篇幅只占20%、然而有效性却达到80% -二八法则 本文你能学到什么？ 在本文中，我们将学习到如何使用二八法则来省力轻松学习 linux 文本处理命令 awk。</description>
    </item>
    
    <item>
      <title>肉身翻墙新加坡安顿指南</title>
      <link>https://vim0.com/post/singapore_3_month/</link>
      <pubDate>Sun, 12 Jun 2022 21:33:31 +0800</pubDate>
      
      <guid>https://vim0.com/post/singapore_3_month/</guid>
      <description>阅读本文能获得什么 本文主要讲的是如何来到新加坡工作之后，需要做的一些事情。 阅读本文你能获得到在新加坡落地之后，需要做的一些必须的 事项例如租房</description>
    </item>
    
    <item>
      <title>使用 Docker Compose 建立你自己的开发环境</title>
      <link>https://vim0.com/post/docker-compose-dev/</link>
      <pubDate>Thu, 05 May 2022 22:08:34 +0800</pubDate>
      
      <guid>https://vim0.com/post/docker-compose-dev/</guid>
      <description>Docker 其实并不是一种新技术，而是一个新瓶装旧酒的工具。 其实我在大学上学的时候就用过 Docker，那个时候还是 17 年左右，Docker 还是如日中天的</description>
    </item>
    
    <item>
      <title>关于编写可维护的代码的一些实践与想法</title>
      <link>https://vim0.com/post/write_-maintainable_code/</link>
      <pubDate>Sun, 10 Apr 2022 23:08:16 +0800</pubDate>
      
      <guid>https://vim0.com/post/write_-maintainable_code/</guid>
      <description>关于编写可维护的代码的一些实践与想法 最近在改一个代码风格迥异并且经历过很多手的历史代码，发现中间中了很多代码设计上的一些反模式的错误。导致我</description>
    </item>
    
    <item>
      <title>我为什么使用双向链接做笔记？</title>
      <link>https://vim0.com/post/two-way-link/</link>
      <pubDate>Sun, 27 Feb 2022 23:15:45 +0800</pubDate>
      
      <guid>https://vim0.com/post/two-way-link/</guid>
      <description>记忆信息后寻找之间的联系才是人的价值。 之前向身边的朋友推荐双相链接的软件来记录八股文，很多人会来问我“为什么要用双向链接？有啥好处？” 。 我这</description>
    </item>
    
    <item>
      <title>关于焦虑和拖延症</title>
      <link>https://vim0.com/post/anxiety/</link>
      <pubDate>Sun, 20 Feb 2022 21:17:20 +0800</pubDate>
      
      <guid>https://vim0.com/post/anxiety/</guid>
      <description>拖延总能让我们苟且偷安，但难题并没有消失。&amp;ndash;《番茄工作法图解》 目前存在的问题 压力产生焦虑，在互联网公司始终会有很多的压力，有些是</description>
    </item>
    
    <item>
      <title>Golang: 如何处理日渐膨胀的 interface</title>
      <link>https://vim0.com/post/how_to_fix_big_interface/</link>
      <pubDate>Sun, 13 Feb 2022 20:23:51 +0800</pubDate>
      
      <guid>https://vim0.com/post/how_to_fix_big_interface/</guid>
      <description>The bigger the interface，the weaker the abstraction。Go Proverbs 先说结论吧，如果你的 Golang interface 有太多函数导致你很难横向拓展，那就把它按照职责拆分</description>
    </item>
    
    <item>
      <title>使用番茄工作法来更好的利用你的时间</title>
      <link>https://vim0.com/post/pomodoro_todo/</link>
      <pubDate>Thu, 03 Feb 2022 00:48:05 +0800</pubDate>
      
      <guid>https://vim0.com/post/pomodoro_todo/</guid>
      <description>对于我还来说，很容易陷入一种工作一整天，一整天都很忙但是不知道在忙什么的状态，导致第二天还是很焦虑，早会还是不知道要讲什么，只能做一下让自己</description>
    </item>
    
    <item>
      <title>Unix 如何杀死一个进程和它的子孙进程?</title>
      <link>https://vim0.com/post/kill_process_and_its_childs/</link>
      <pubDate>Mon, 24 Jan 2022 21:49:48 +0800</pubDate>
      
      <guid>https://vim0.com/post/kill_process_and_its_childs/</guid>
      <description>最近周末在维护一个开源项目，叫做 air。它是一个 Golang 的热加载代码的工具，会监听本地的文件变化，然后自动重新加载。 遇到的问题 最近遇到一个特别有意</description>
    </item>
    
    <item>
      <title>Golang: 让你的零值更有用</title>
      <link>https://vim0.com/post/make_zero_value_useful/</link>
      <pubDate>Sun, 16 Jan 2022 15:04:40 +0800</pubDate>
      
      <guid>https://vim0.com/post/make_zero_value_useful/</guid>
      <description>Make the zero value useful。 &amp;ndash;Go Proverbs 让我们从 Golang blog 开始吧：The zero value 当内存被分配来存储一个值时，无论是通过声明还是调用 make 或 new，并且没有提供明确的初始</description>
    </item>
    
    <item>
      <title>使用 Mock 和 Interface 进行 Golang 单测</title>
      <link>https://vim0.com/post/golang/use_mock_to_test/</link>
      <pubDate>Fri, 07 Jan 2022 01:37:56 +0800</pubDate>
      
      <guid>https://vim0.com/post/golang/use_mock_to_test/</guid>
      <description>在工作中我经常会发现很多工程师的 Golang 单测是写的有问题的，只是单纯的调用代码做输出，并且会包含各种 IO 操作，导致单测无法到处运行。 使用 Mock 和 Interface 进行 Golang</description>
    </item>
    
    <item>
      <title>关于 Golang Slice 的一些细节</title>
      <link>https://vim0.com/post/golang/about_slice/</link>
      <pubDate>Tue, 21 Dec 2021 01:37:56 +0800</pubDate>
      
      <guid>https://vim0.com/post/golang/about_slice/</guid>
      <description>关于 Golang Slice 的一些细节 在 Golang 中，有两种数据类型： 一种是限定长度的数组，叫做 Array，另外一种是不限定长度的数组，叫做 Slice。 区分 Array 和 Slice Array 和 Slice</description>
    </item>
    
    <item>
      <title>总结一些计算机常用的原则</title>
      <link>https://vim0.com/post/summary/rules/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://vim0.com/post/summary/rules/</guid>
      <description>计算机常用的原则 在写代码的时候我们经常会有一些体会和经验所得，这些经验所得其实老早被之前的大神归纳成为原则。最近这一年我就一直在收集各种原则</description>
    </item>
    
    <item>
      <title>重新学习英语语法</title>
      <link>https://vim0.com/post/english/english_grammar/</link>
      <pubDate>Thu, 14 Oct 2021 01:37:56 +0800</pubDate>
      
      <guid>https://vim0.com/post/english/english_grammar/</guid>
      <description>背景 感觉自己对英语还是有很多的欠缺，所以前一段时间学习了一些英语相关的语法，其实很多都是初中要学的东西但是自己当时一点都不上心，压根就没从老</description>
    </item>
    
    <item>
      <title>上班族近期小半年入门投资基金组合的学习与实践经历</title>
      <link>https://vim0.com/post/investment/learned_about_investment/</link>
      <pubDate>Tue, 01 Jun 2021 20:55:56 +0800</pubDate>
      
      <guid>https://vim0.com/post/investment/learned_about_investment/</guid>
      <description>”每个人都应该投资，越早越好。哪怕你一直输钱，十年后至少你学会了如何少输。而不是等到十年后被迫必须投资时，一次输掉大部分本金“ &amp;ndash;@xiaodotdo 前言 笔者因为</description>
    </item>
    
    <item>
      <title>疫情期间的肉身翻墙新加坡指南</title>
      <link>https://vim0.com/post/softskills/physical_break_gfw/</link>
      <pubDate>Wed, 19 May 2021 14:40:53 +0800</pubDate>
      
      <guid>https://vim0.com/post/softskills/physical_break_gfw/</guid>
      <description>”国外生活的难度比想象的小，但出国需要的决心比想象的大“ &amp;ndash;@FreiheitYu 作者写下这篇文章的时候是 2021 年上旬，随着出入境政策的放松与收紧可能会有出入，仅供参考</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://vim0.com/post/about/about_me/</link>
      <pubDate>Sat, 15 May 2021 14:40:53 +0800</pubDate>
      
      <guid>https://vim0.com/post/about/about_me/</guid>
      <description>About me 欢迎！我是咸糖。这是我的个人网站，我在其中博客是我在日常生活中学到的东西或思考，希望你能喜欢它。 我在这里分享我学到的东西，并不意味着我很</description>
    </item>
    
    <item>
      <title>软技能:大厂底层员工打工指南</title>
      <link>https://vim0.com/post/softskills/how_to_live_in_big_company/</link>
      <pubDate>Mon, 26 Apr 2021 14:40:53 +0800</pubDate>
      
      <guid>https://vim0.com/post/softskills/how_to_live_in_big_company/</guid>
      <description>“我发现很多文章面经都是在讲如何进入大厂的，但是其实在大厂生存也是一个学问” 前言 笔者最近换了工作，选择了心脏跳动，没有在之前的某跳动继续工作</description>
    </item>
    
    <item>
      <title>软技能:我是如何获取知识与信息的？</title>
      <link>https://vim0.com/post/softskills/how_do_i_acquire_knowledge_and_information/</link>
      <pubDate>Fri, 02 Apr 2021 14:40:53 +0800</pubDate>
      
      <guid>https://vim0.com/post/softskills/how_do_i_acquire_knowledge_and_information/</guid>
      <description>​ ”我们每个人都是信息时代的荒野猎人，在信息构成的一望无际的荒野中求存。“ -《为什么要成为信息捕食者》 ​ 在信息爆炸的移动互联网时代，每个互联</description>
    </item>
    
    <item>
      <title>分布式的令牌桶算法的实现</title>
      <link>https://vim0.com/post/interview/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 09 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>https://vim0.com/post/interview/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>什么是令牌桶算法? 令牌桶算法是一种限流算法，他与漏桶算法的实现是一种相反的实现。 漏桶算法是按照一定频率的速率进行漏水，然后对于我们的请求就可</description>
    </item>
    
    <item>
      <title>实现一个AtomicInteger</title>
      <link>https://vim0.com/post/concurrency/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAatomicinteger/</link>
      <pubDate>Mon, 06 Apr 2020 16:33:34 +0800</pubDate>
      
      <guid>https://vim0.com/post/concurrency/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAatomicinteger/</guid>
      <description>什么是 AtomicInteger AtomicInteger 顾名思义是一个具有原子化操作的 Integer，与普通的 Integer 的区别是 AtomicInteger 采用一个 CAS 的方式使 Integer 的自增等操作变成原子化操作。 实现的之前需要了</description>
    </item>
    
    <item>
      <title>GC root 在哪里？</title>
      <link>https://vim0.com/post/jvm/gc_root/</link>
      <pubDate>Mon, 06 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>https://vim0.com/post/jvm/gc_root/</guid>
      <description>什么是GC Root 首先我们知道标记算法，JVM 的标记算法我们可以了解为一个可达性算法，所以所有的可达性算法都会有起点，那么这个起点就是GC Root</description>
    </item>
    
    <item>
      <title>什么是 Minor GC/Major GC</title>
      <link>https://vim0.com/post/jvm/full_gc/</link>
      <pubDate>Mon, 06 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>https://vim0.com/post/jvm/full_gc/</guid>
      <description>什么是 Minor GC/Major GC 首先我们先科普一下JVM 经典的堆布局: 对于经典的 JVM heap 布局，有两个区域比较清晰，首先是Young 区,一般会来存放年轻的对象或者刚被</description>
    </item>
    
    <item>
      <title>漏桶算法的设计与实现</title>
      <link>https://vim0.com/post/interview/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 05 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>https://vim0.com/post/interview/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/</guid>
      <description>什么是漏斗算法？ 漏斗算法顾名思义采用一个漏斗来对流量进行限制。 因为漏斗下面有孔，所以会定时的漏水下去，然后我们可以将流量想象为从上边落入漏斗</description>
    </item>
    
    <item>
      <title>剑指offer</title>
      <link>https://vim0.com/post/interview/5%E5%A4%A9%E5%88%B7%E5%AE%8C%E5%89%91%E6%8C%87/</link>
      <pubDate>Fri, 03 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>https://vim0.com/post/interview/5%E5%A4%A9%E5%88%B7%E5%AE%8C%E5%89%91%E6%8C%87/</guid>
      <description>No2 单例模式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class No2TwiceCheckSingleton { private volatile static No2TwiceCheckSingleton instance = null; private static final Object sybObj = new Object(); // 一定记住要私有化构造器，不然人家还是能够创建 private No2TwiceCheckSingleton() { }</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://vim0.com/post/interview/%E6%89%8B%E5%86%99%E5%8D%95%E4%BE%8B/</link>
      <pubDate>Fri, 03 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>https://vim0.com/post/interview/%E6%89%8B%E5%86%99%E5%8D%95%E4%BE%8B/</guid>
      <description>单例模式是什么? 单例模式，也叫单子模式，是一种常用的软件设计模式，属于创建型模式的一种。 在这个设计模式中，单例对象的类必须保证只有一个实例存</description>
    </item>
    
    <item>
      <title>TCP 针对面试学习</title>
      <link>https://vim0.com/post/network/tcp%E9%92%88%E5%AF%B9%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 01 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>https://vim0.com/post/network/tcp%E9%92%88%E5%AF%B9%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0/</guid>
      <description>什么是 TCP TCP 是一个全双工面向字节流的基于 IP 协议的协议。 TCP 端到端的准确传输。 对于每一个字节进行确认 对于恶劣的网络情况的处理 超时重传 拥塞控制 效率提</description>
    </item>
    
    <item>
      <title>Actor 如何处理阻塞消息</title>
      <link>https://vim0.com/post/scala/future_in_actor/</link>
      <pubDate>Wed, 15 Jan 2020 17:51:36 +0800</pubDate>
      
      <guid>https://vim0.com/post/scala/future_in_actor/</guid>
      <description>观察了一下业务的代码中发现在 Actor 中采用了很多 import scala.concurrent.ExecutionContext.Implicits.global 来作为 Actor 内部的执行 Future 的线程池，之前觉得好像也没啥问题。 但是在看完 akka 源码后发现好像有些不妥。 简单</description>
    </item>
    
    <item>
      <title>Akka 源码解析</title>
      <link>https://vim0.com/post/scala/akka_source_code/</link>
      <pubDate>Wed, 15 Jan 2020 17:26:53 +0800</pubDate>
      
      <guid>https://vim0.com/post/scala/akka_source_code/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 object Main1 extends App { val system = ActorSystem(&amp;#34;HelloSystem&amp;#34;) val jazzListener = system.actorOf(Props[Listener]) val musicListener = system.actorOf(Props[Listener]) system.eventStream.subscribe(jazzListener, classOf[Jazz]) // jazzListener 订阅 Jazz 事件 system.eventStream.subscribe(musicListener, classOf[AllKindsOfMusic]) // musicListener 订阅 AllKindsOfMusic 以及它的子类 事件 // 只有 musicListener 接收到这个事件 system.eventStream.publish(Electronic(&amp;#34;Parov Stelar&amp;#34;)) // jazzListener</description>
    </item>
    
    <item>
      <title>How to learn scala</title>
      <link>https://vim0.com/post/scala/how_to_learn_scala/</link>
      <pubDate>Wed, 15 Jan 2020 16:33:34 +0800</pubDate>
      
      <guid>https://vim0.com/post/scala/how_to_learn_scala/</guid>
      <description>背景: 刚来到以scala为技术栈的公司的时候，配置了半天环境，然后终于将项目起了起来，发现里面的代码很奇怪，没有任何循环，数据的操作是一个函</description>
    </item>
    
    <item>
      <title>AES 需要限制 SEED 长度</title>
      <link>https://vim0.com/post/scala/aes_limit_length/</link>
      <pubDate>Sun, 20 Oct 2019 01:37:56 +0800</pubDate>
      
      <guid>https://vim0.com/post/scala/aes_limit_length/</guid>
      <description>写了一个工具类用来加密解密数据库的 app 字段 本地环境运行单测什么都没有任何问题，但是一到生产环境就出现 BUG。 这个的原因是因为线上环境没有支持 AES</description>
    </item>
    
    <item>
      <title>Java 如何区分==与.equals()方法</title>
      <link>https://vim0.com/post/translate/java_equals/</link>
      <pubDate>Sun, 24 Feb 2019 14:40:53 +0800</pubDate>
      
      <guid>https://vim0.com/post/translate/java_equals/</guid>
      <description>一般来说equals()和&amp;quot;==&amp;quot;运算符是用来比较两个对象是否相等，但是这两者之前还是有许多不同： 最主要的不同是.equ</description>
    </item>
    
    <item>
      <title>2018年年度总结</title>
      <link>https://vim0.com/post/summary/2018_summary/</link>
      <pubDate>Sun, 30 Dec 2018 14:40:53 +0800</pubDate>
      
      <guid>https://vim0.com/post/summary/2018_summary/</guid>
      <description>到年底啦，稍微写一点总结总结一下这个2018年。 这一年有失去也有获得吧。失去是一段没有结果的感情的失败，获得则是整个人质的提升。 失去的就让他</description>
    </item>
    
    <item>
      <title>Java 集合扩容</title>
      <link>https://vim0.com/post/collection/collection/</link>
      <pubDate>Fri, 07 Dec 2018 01:37:56 +0800</pubDate>
      
      <guid>https://vim0.com/post/collection/collection/</guid>
      <description>集合扩容 ArrayList 对于 ArrayList 他默认的容量为 10，所以如果需要对 ArrayList 进行大数据量的处理的时候的话，就需要使用显式制定容量的方式进行处理。这样可以减少不必要的</description>
    </item>
    
  </channel>
</rss>
