<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network(计算机网络)s on xiantang</title>
    <link>https://xiantang.github.io/network%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in Network(计算机网络)s on xiantang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://xiantang.github.io/network%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://xiantang.github.io/network%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/internet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiantang.github.io/network%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/internet/</guid>
      <description>计算机网络 网络分层  应用层:网络进程到应用程序。针对也定的应用规定各层协议。端系统用软件实现。 表示层:负责数据的加密解密，把数据转换成独立于机器的数据。 会话层:主机间通讯，管理应用程序之间的会话。 传输层:在网络的各个节点之前可靠的分发数据包。 网络层:进行地址分配和路由。 数据链路层:可靠的点对点数据直链。 物理层:不一定可靠的点对点数据直链。  底层网络协议 ARP 基本功能为透过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的顺利进行。在每台安装有TCP/IP协议的电脑或路由器里都有一个ARP缓存表，表里的IP地址与MAC地址是一对应的。
NAT 基本功能为透过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的顺利进行。在每台安装有TCP/IP协议的电脑或路由器里都有一个ARP缓存表，表里的IP地址与MAC地址是一对应的。
HTTP 协议  构建在TCP/IP协议之上 默认端口号80 无连接无状态  状态码含义  1** 服务器收到请求，需要请求者继续执行操作。 2** 成功,操作被成功接收并处理。 3** 重定向，需要进一步的操作以完成请求。  301 Moved Permanently。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替 302 Moved Temporarily。与301类似。但资源只是临时被移动。客户端应继续使用原有URI 304 Not Modified。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源。   4**	客户端错误，请求包含语法错误或无法完成请求  400 Bad Request 由于客户端请求有语法错误，不能被服务器所理解。 401 Unauthorized 请求未经授权。这个状态代码必须和WWW-Authenticate报头域一起使用 403 Forbidden 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因 404 Not Found 请求的资源不存在，例如，输入了错误的UR   5**	服务器错误，服务器在处理请求的过程中发生了错误  500 Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。 503 Service Unavailable 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。    GET 和 POST 的区别 GET可提交的数据量受到URL长度的限制，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。 理论上讲，POST是没有大小限制的，HTTP协议规范也没有进行大小限制，出于安全考虑，服务器软件在实现时会做一定限制。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://xiantang.github.io/network%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiantang.github.io/network%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA%E7%AC%94%E8%AE%B0/</guid>
      <description>网络概论笔记 传输层 TCP:客户端与服务器端需要维持会话，TCP需要传输的文件进行分段 传输进行可靠传输
流量控制功能
UDP: 一个数据包就能够完成数据传输，不需要建立绘画，不需要流量控制
etc：DNS
屏幕 广播 （多播）
传输层协议和应用层协议的关系
HTTP =TCP + 80
HTTPS = TCP+443
RDP = TCP+3389
FTP = TCP + 31
telnet = TCP + 23
SQL = TCP+1433
DNS = UDP + 53
POP3 = TCP +110
IP 层协议主要提供了主机之间的逻辑通讯
TCP/UDP 主要提供了应用程序之间的逻辑通讯
传输层的端口：TCP 6 UDP 17 ICMP 17
登记端口号：数值1024~49151
客户端端口号：数值49152~6553
UDP 需要从 网络层提炼出20个字节 一起计算首部
伪首部 源地址
目标地址
源地址+目标地址 总和为8个字节
全 0 和 UDP 协议号以及 UDP 的长度</description>
    </item>
    
  </channel>
</rss>