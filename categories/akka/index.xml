<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>akka on xiantang - Self-discipline set me free.</title>
    <link>https://vim0.com/categories/akka/</link>
    <description>Recent content in akka on xiantang - Self-discipline set me free.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 15 Jan 2020 17:51:36 +0800</lastBuildDate><atom:link href="https://vim0.com/categories/akka/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How Actor Handles Blocking Messages</title>
      <link>https://vim0.com/post/scala/future_in_actor/</link>
      <pubDate>Wed, 15 Jan 2020 17:51:36 +0800</pubDate>
      
      <guid>https://vim0.com/post/scala/future_in_actor/</guid>
      <description>I noticed in the business code that a lot of
import scala.concurrent.ExecutionContext.Implicits.global
is used as the thread pool for executing Future inside the Actor. I didn&amp;rsquo;t think there was a problem before. But after reading the akka source code, it seems a bit inappropriate.
Let&amp;rsquo;s briefly talk about the architecture of Actor
When an Actor sends a message to another Actor, it sends this message to the recipient&amp;rsquo;s mailbox
The mailbox is a class that implements Runnable, so it can be executed by a thread pool.</description>
    </item>
    
    <item>
      <title>Analysis of Akka Source Code</title>
      <link>https://vim0.com/post/scala/akka_source_code/</link>
      <pubDate>Wed, 15 Jan 2020 17:26:53 +0800</pubDate>
      
      <guid>https://vim0.com/post/scala/akka_source_code/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 object Main1 extends App { val system = ActorSystem(&amp;#34;HelloSystem&amp;#34;) val jazzListener = system.actorOf(Props[Listener]) val musicListener = system.actorOf(Props[Listener]) system.eventStream.subscribe(jazzListener, classOf[Jazz]) // jazzListener 订阅 Jazz 事件 system.eventStream.subscribe(musicListener, classOf[AllKindsOfMusic]) // musicListener 订阅 AllKindsOfMusic 以及它的子类 事件 // 只有 musicListener 接收到这个事件 system.eventStream.publish(Electronic(&amp;#34;Parov Stelar&amp;#34;)) // jazzListener</description>
    </item>
    
  </channel>
</rss>
