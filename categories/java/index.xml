<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 自律者自由</title>
    <link>https://vim0.com/categories/java/</link>
    <description>Recent content in Java on 自律者自由</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 06 Apr 2020 16:33:34 +0800</lastBuildDate><atom:link href="https://vim0.com/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>实现一个AtomicInteger</title>
      <link>https://vim0.com/post/concurrency/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAatomicinteger/</link>
      <pubDate>Mon, 06 Apr 2020 16:33:34 +0800</pubDate>
      
      <guid>https://vim0.com/post/concurrency/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAatomicinteger/</guid>
      <description>什么是 AtomicInteger AtomicInteger 顾名思义是一个具有原子化操作的 Integer，与普通的 Integer 的区别是 AtomicInteger 采用一个 CAS 的方式使 Integer 的自增等操作变成原子化操作。
实现的之前需要了解的知识 首先我们先观察 AotmicInteger 的自增操作：
public final int incrementAndGet() { for (;;) { int current = get(); int next = current + 1; if (compareAndSet(current, next)) return next; } } 他采用了死循环，并且每次循环都获取最新的 value，通过这个值计算出自增后的值，使用 compareAndSet 来交换值，并且判断结果，如果是 true 就返回自增后的值，如果是 false 就进行重试，其实这就是一个典型的 CAS 操作。
并且这个 compareAndSet 操作，其实很简单，就是调用 unsafe 对象的 compareAndSwapInt
public final boolean compareAndSet(int expect, int update) { return unsafe.compareAndSwapInt(this, valueOffset, expect, update); } compareAndSwapInt 就是根据当前对象的所需要 CAS 操作的成员的所在对象的 offset 来进行 CAS 的修改操作。</description>
    </item>
    
    <item>
      <title>Java 集合扩容</title>
      <link>https://vim0.com/post/collection/collection/</link>
      <pubDate>Fri, 07 Dec 2018 01:37:56 +0800</pubDate>
      
      <guid>https://vim0.com/post/collection/collection/</guid>
      <description>集合扩容 ArrayList 对于 ArrayList 他默认的容量为 10，所以如果需要对 ArrayList 进行大数据量的处理的时候的话，就需要使用显式制定容量的方式进行处理。这样可以减少不必要的扩容操作。
主要是因为 ArrayList 的扩容操作需要额外开辟空间，他采用的是 Arrays.copyOf 的方式进行拷贝：
private void grow(int minCapacity) { // overflow-conscious code  int oldCapacity = elementData.length; int newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1); if (newCapacity - minCapacity &amp;lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE &amp;gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win:  elementData = Arrays.copyOf(elementData, newCapacity); } Arrays.</description>
    </item>
    
  </channel>
</rss>
