<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xiantang - 自律者自由</title>
    <link>https://xiantang.github.io/</link>
    <description>Recent content on xiantang - 自律者自由</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 26 Apr 2021 14:40:53 +0800</lastBuildDate><atom:link href="https://xiantang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>软技能:大厂底层员工打工指南</title>
      <link>https://xiantang.github.io/post/softskills/how_to_live_in_big_company/</link>
      <pubDate>Mon, 26 Apr 2021 14:40:53 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/softskills/how_to_live_in_big_company/</guid>
      <description>”我发现很多文章面经都是在讲如何进入大厂的，但是其实在大厂生存也是一个学问“ 前言 笔者最近换了工作，选择了心脏跳动，没有在之前的某跳动继续工作</description>
    </item>
    
    <item>
      <title>软技能:我是如何获取知识与信息的？</title>
      <link>https://xiantang.github.io/post/softskills/how_do_i_acquire_knowledge_and_information/</link>
      <pubDate>Fri, 02 Apr 2021 14:40:53 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/softskills/how_do_i_acquire_knowledge_and_information/</guid>
      <description>​ ”我们每个人都是信息时代的荒野猎人，在信息构成的一望无际的荒野中求存。“ -《为什么要成为信息捕食者》 ​ 在信息爆炸的移动互联网时代，每个互联</description>
    </item>
    
    <item>
      <title>分布式的令牌桶算法的实现</title>
      <link>https://xiantang.github.io/post/interview/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 09 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/interview/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>什么是令牌桶算法? 令牌桶算法是一种限流算法，他与漏桶算法的实现是一种相反的实现。 漏桶算法是按照一定频率的速率进行漏水，然后对于我们的请求就可</description>
    </item>
    
    <item>
      <title>实现一个AtomicInteger</title>
      <link>https://xiantang.github.io/post/concurrency/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAatomicinteger/</link>
      <pubDate>Mon, 06 Apr 2020 16:33:34 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/concurrency/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAatomicinteger/</guid>
      <description>什么是AtomicInteger AtomicInteger 顾名思义是一个具有原子化操作的 Integer，与普通的Integer的区别是 AtomicInteger 采用一个CAS 的方式使Int</description>
    </item>
    
    <item>
      <title>GC root 在哪里？</title>
      <link>https://xiantang.github.io/post/jvm/gc_root/</link>
      <pubDate>Mon, 06 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/jvm/gc_root/</guid>
      <description>什么是GC Root 首先我们知道标记算法，JVM 的标记算法我们可以了解为一个可达性算法，所以所有的可达性算法都会有起点，那么这个起点就是GC Root</description>
    </item>
    
    <item>
      <title>什么是 Minor GC/Major GC</title>
      <link>https://xiantang.github.io/post/jvm/full_gc/</link>
      <pubDate>Mon, 06 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/jvm/full_gc/</guid>
      <description>什么是 Minor GC/Major GC 首先我们先科普一下JVM 经典的堆布局: 对于经典的 JVM heap 布局，有两个区域比较清晰，首先是Young 区,一般会来存放年轻的对象或者刚被</description>
    </item>
    
    <item>
      <title>漏桶算法的设计与实现</title>
      <link>https://xiantang.github.io/post/interview/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 05 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/interview/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/</guid>
      <description>什么是漏斗算法？ 漏斗算法顾名思义采用一个漏斗来对流量进行限制。 因为漏斗下面有孔，所以会定时的漏水下去，然后我们可以将流量想象为从上边落入漏斗</description>
    </item>
    
    <item>
      <title>剑指offer</title>
      <link>https://xiantang.github.io/post/interview/5%E5%A4%A9%E5%88%B7%E5%AE%8C%E5%89%91%E6%8C%87/</link>
      <pubDate>Fri, 03 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/interview/5%E5%A4%A9%E5%88%B7%E5%AE%8C%E5%89%91%E6%8C%87/</guid>
      <description>五天刷完剑指 No2 单例模式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class No2TwiceCheckSingleton { private volatile static No2TwiceCheckSingleton instance = null; private static final Object sybObj = new Object(); // 一定记住要私有化构造器，不然人家还是能够</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://xiantang.github.io/post/interview/%E6%89%8B%E5%86%99%E5%8D%95%E4%BE%8B/</link>
      <pubDate>Fri, 03 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/interview/%E6%89%8B%E5%86%99%E5%8D%95%E4%BE%8B/</guid>
      <description>单例模式是什么? 单例模式，也叫单子模式，是一种常用的软件设计模式，属于创建型模式的一种。 在这个设计模式中，单例对象的类必须保证只有一个实例存</description>
    </item>
    
    <item>
      <title>TCP 针对面试学习</title>
      <link>https://xiantang.github.io/post/network/tcp%E9%92%88%E5%AF%B9%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 01 Apr 2020 01:37:56 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/network/tcp%E9%92%88%E5%AF%B9%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0/</guid>
      <description>什么是TCP TCP 是一个全双工 面向字节流的基于IP协议的协议。 TCP 端到端的准确传输。 对于每一个字节进行确认 对于恶劣的网络情况的处理 超时重传 拥塞控制</description>
    </item>
    
    <item>
      <title>Actor 如何处理阻塞消息</title>
      <link>https://xiantang.github.io/post/scala/future_in_actor/</link>
      <pubDate>Wed, 15 Jan 2020 17:51:36 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/scala/future_in_actor/</guid>
      <description>观察了一下业务的代码中发现在 Actor 中采用了很多 import scala.concurrent.ExecutionContext.Implicits.global 来作为 Actor 内部的执行 Future 的线程池，之前觉得好像也没啥问题。 但是在看完 akka 源码后发现好像有些不妥。 简单</description>
    </item>
    
    <item>
      <title>Akka 源码解析</title>
      <link>https://xiantang.github.io/post/scala/akka_source_code/</link>
      <pubDate>Wed, 15 Jan 2020 17:26:53 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/scala/akka_source_code/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 object Main1 extends App { val system = ActorSystem(&amp;#34;HelloSystem&amp;#34;) val jazzListener = system.actorOf(Props[Listener]) val musicListener = system.actorOf(Props[Listener]) system.eventStream.subscribe(jazzListener, classOf[Jazz]) // jazzListener 订阅 Jazz 事件 system.eventStream.subscribe(musicListener, classOf[AllKindsOfMusic]) // musicListener 订阅 AllKindsOfMusic 以及它的子类 事件 // 只有 musicListener 接收到这个事件 system.eventStream.publish(Electronic(&amp;#34;Parov Stelar&amp;#34;)) // jazzListener</description>
    </item>
    
    <item>
      <title>How to learn scala</title>
      <link>https://xiantang.github.io/post/scala/how_to_learn_scala/</link>
      <pubDate>Wed, 15 Jan 2020 16:33:34 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/scala/how_to_learn_scala/</guid>
      <description>背景: 刚来到以scala为技术栈的公司的时候，配置了半天环境，然后终于将项目起了起来，发现里面的代码很奇怪，没有任何循环，数据的操作是一个函</description>
    </item>
    
    <item>
      <title>AES 需要限制 SEED 长度</title>
      <link>https://xiantang.github.io/post/scala/aes_limit_length/</link>
      <pubDate>Sun, 20 Oct 2019 01:37:56 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/scala/aes_limit_length/</guid>
      <description>写了一个工具类用来加密解密数据库的 app字段 本地环境运行单测什么都没有任何问题，但是一到生产环境就出现 BUG。 这个的原因是因为线上环境没有支</description>
    </item>
    
    <item>
      <title>2018年年度总结</title>
      <link>https://xiantang.github.io/post/summary/2018_summary/</link>
      <pubDate>Sun, 30 Dec 2018 14:40:53 +0800</pubDate>
      
      <guid>https://xiantang.github.io/post/summary/2018_summary/</guid>
      <description>到年底啦，稍微写一点总结总结一下这个2018年。 这一年有失去也有获得吧。失去是一段没有结果的感情的失败，获得则是整个人质的提升。 失去的就让他</description>
    </item>
    
    <item>
      <title></title>
      <link>https://xiantang.github.io/post/collection/collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiantang.github.io/post/collection/collection/</guid>
      <description>集合扩容 ArrayList 对于 ArrayList 他默认的容量为10，所以如果需要对ArrayList 进行大数据量的处理的时候的话，就需要使用显式制定容量的方式进行处理。这样</description>
    </item>
    
  </channel>
</rss>
